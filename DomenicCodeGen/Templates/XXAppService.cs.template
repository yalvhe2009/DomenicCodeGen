//Vars：
//${namespace}
//${entity}
//${lowerCaseEntity}
using Abp.Application.Services.Dto;
using Abp.Authorization;
using Abp.Collections.Extensions;
using Abp.Domain.Repositories;
using Abp.Extensions;
using Abp.Linq.Extensions;
using AutoMapper.QueryableExtensions;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Text;
using System.Threading.Tasks;
using YX.Zero.Extensions;

namespace ${namespace}
{
    public class ${entity}AppService : ${moduleName}AppServiceBase, I${entity}AppService
    {
        private readonly ${entity}Manager _${lowerCaseEntity}Manager;
        private readonly IRepository<${entity}, Guid> _${lowerCaseEntity}Repository;

        public ${entity}AppService(${entity}Manager ${lowerCaseEntity}Manager, IRepository<${entity}, Guid> ${lowerCaseEntity}Repository)
        {
            this._${lowerCaseEntity}Manager = ${lowerCaseEntity}Manager;
            this._${lowerCaseEntity}Repository = ${lowerCaseEntity}Repository;
        }
        
        [AbpAuthorize(PermissionNames.)]
        public async Task CreateOrUpdate${entity}Async(CreateOrUpdate${entity}Input input)
        {
            if (input.${entity}.Id.HasValue)
            {
                await Update${entity}Async(input);
            }
            else
            {
                await Create${entity}Async(input);
            }
        }
        
        [AbpAuthorize(PermissionNames.)]
        public async Task Delete${entity}Async(EntityDto<Guid> input)
        {
            var entity = await _${lowerCaseEntity}Repository.GetAsync(input.Id);
            await _${lowerCaseEntity}Manager.DeleteAsync(entity);
        }

        [AbpAuthorize(PermissionNames.)]
        public async Task<${entity}EditDto> Get${entity}ForEditAsync(NullableIdDto<Guid> input)
        {
            ${entity}EditDto editDto;
            if (input.Id.HasValue)
            {
                var entity = await _${lowerCaseEntity}Repository.GetAsync(input.Id.Value);
                editDto = ObjectMapper.Map<${entity}EditDto>(entity);
            }
            else
            {
                editDto = new ${entity}EditDto();
            }
            
            return editDto;
        }

        [AbpAuthorize(PermissionNames.)]
        public async Task<PagedResultDto<${entity}ListDto>> Get${entity}ListAsync(Get${entity}Input input)
        {
            var query = _${lowerCaseEntity}Repository.GetAll()
                .WhereIf(!input.Filter.IsNullOrWhiteSpace(), x=> x.${entity}Name.Contains(input.Filter))
                .WhereIf(input.BeginDate.HasValue, x => x.CreationTime >= input.BeginDate)
                .WhereIf(input.EndDate.HasValue, x => x.CreationTime <= input.EndDate);
            var count = await query.CountAsync();
            var list = await query
                .OrderBy(input.Sorting)
                .PageBy(input)
                .ProjectTo<${entity}ListDto>(_mapper.ConfigurationProvider)
                .ToListAsync();
            return new PagedResultDto<${entity}ListDto>(count, list.FillBaseTexts().ToList());
        }

        private async Task Update${entity}Async(CreateOrUpdate${entity}Input input)
        {
            var entity = await _${lowerCaseEntity}Repository.GetAsync(input.${entity}.Id.Value);
            ObjectMapper.Map(input.${entity}, entity);
            await _${lowerCaseEntity}Manager.UpdateAsync(entity);
        }

        private async Task Create${entity}Async(CreateOrUpdate${entity}Input input)
        {
            var entity = ObjectMapper.Map<${entity}>(input.${entity});
            await _${lowerCaseEntity}Manager.CreateAsync(entity);
        }
    }
}
